     1                                  ;           p1q1.asm
     2                                  ;
     3                                  ;           RUN:      Linux
     4                                  ;           ASSEMBLE: nasm -l p1q1.lst -f elf p1q1.asm
     5                                  ;           LINK:     ld -m elf_i386 -o p1q1 p1q1.o
     6                                  ;
     7                                  ;
     8                                  
     9                                  ; Equivalent statements
    10                                  
    11                                  ; Data segment
    12                                  SECTION .data
    13                                  
    14                                  ; Un-initialized data segment
    15                                  SECTION .bss
    16                                  
    17                                  ; Code segment
    18                                  SECTION .text
    19                                  GLOBAL _function1
    20                                  
    21                                  _function1:
    22                                  	; Just some random code
    23                                  
    24 00000000 55                      	push ebp
    25 00000001 89E5                    	mov ebp, esp
    26                                  	
    27 00000003 8B7508                  	mov esi, [ebp + 8]
    28 00000006 8B7D0C                  	mov edi, [ebp + 12]
    29                                  
    30 00000009 B95D000000              	mov ecx, 0000005Dh ; 93 decimal
    31 0000000E BA00000000              	mov edx, 00000000h ; 
    32                                  
    33                                  .loop:
    34 00000013 BA00000000              	mov edx, 0h 	; clearing edx/dx/dh/dl register
    35 00000018 66B80000                	mov ax, 0h
    36 0000001C 8A06                    	mov al, [esi]
    37 0000001E 6698                    	cbw 
    38 00000020 6689C3                  	mov bx, ax
    39 00000023 8A4601                  	mov al, byte [esi + 1]
    40 00000026 6698                    	cbw
    41 00000028 6601C3                  	add bx, ax
    42 0000002B 8A4602                  	mov al, byte [esi + 2]
    43 0000002E 6698                    	cbw
    44 00000030 6601C3                  	add bx, ax
    45 00000033 8A4603                  	mov al, byte [esi + 3]
    46 00000036 6698                    	cbw
    47 00000038 6601C3                  	add bx, ax
    48 0000003B 8A4604                  	mov al, byte [esi + 4]
    49 0000003E 6698                    	cbw
    50 00000040 6601C3                  	add bx, ax
    51 00000043 8A4605                  	mov al, byte [esi + 5]
    52 00000046 6698                    	cbw
    53 00000048 6601C3                  	add bx, ax
    54 0000004B 8A4606                  	mov al, byte [esi + 6]
    55 0000004E 6698                    	cbw
    56 00000050 6601C3                  	add bx, ax
    57 00000053 8A4607                  	mov al, byte [esi + 7]
    58 00000056 6698                    	cbw
    59 00000058 6601D8                  	add ax, bx
    60                                  	
    61                                  	
    62 0000005B 66BB0800                	mov bx, 08h
    63 0000005F 66BA0000                	mov dx, 00h
    64 00000063 66F7FB                  	idiv bx
    65 00000066 6689470E                	mov [edi + 14], ax 
    66 0000006A 46                      	inc esi
    67 0000006B 47                      	inc edi 
    68 0000006C 47                      	inc edi
    69 0000006D E0A4                    	loopnz .loop
    70                                  
    71                                  	; Return
    72 0000006F 5D                      	pop ebp
    73 00000070 C3                      	ret
